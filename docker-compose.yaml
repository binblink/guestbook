version: '3.7'
services:
    # PHP Service
    php:
        build:
            context: .
            dockerfile: docker/php/Dockerfile
        container_name: ${APP_SLUG}_php
        restart: unless-stopped
        environment:
            SERVICE_NAME: ${APP_SLUG}_php
            SERVICE_TAGS: ${APP_ENV}
        working_dir: /var/www
        volumes:
            - ./:/var/www
            - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
        networks:
            - app_network

    # Nginx Service
    nginx:
        image: nginx:alpine
        container_name: ${APP_SLUG}_nginx
        restart: unless-stopped
        ports:
            - "8888:80"
        volumes:
            - ./:/var/www
            - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        networks:
            - app_network

    # Mariadb Service
    database:
        image: mariadb:latest
        container_name: ${APP_SLUG}_database
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_USER: ${DB_USERNAME}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            SERVICE_TAGS: ${APP_ENV}
            SERVICE_NAME: ${APP_SLUG}_database
        volumes:
            - ./storage-db:/var/lib/mysql/
            - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
        networks:
            - app_network

    # Redis service
    redis:
        image: redis:latest
        container_name: ${APP_SLUG}_redis
        command: redis-server --requirepass ${REDIS_PASSWORD}
        env_file:
            - .env
        networks:
            - app_network

    # Phpmyadmin
    phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
            - "8585:80"
        container_name: ${APP_SLUG}_phpmyadmin
        depends_on:
            - database
        environment:
            PMA_HOST: ${DB_HOST}
            PMA_PORT: ${DB_PORT}
            PMA_USER: ${DB_USERNAME}
            PMA_PASSWORD: ${DB_PASSWORD}
        networks:
            - app_network

# Docker Networks

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-13}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMe}
      POSTGRES_USER: ${POSTGRES_USER:-symfony}
    volumes:
      - db-data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###
networks:
    app_network:
        driver: bridge
volumes:
###> doctrine/doctrine-bundle ###
  db-data:
###< doctrine/doctrine-bundle ###
